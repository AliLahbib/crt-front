
import { api } from './api';

/**
 * üìÖ Interface Event - Structure d'un √©v√©nement
 * 
 * Cette interface d√©finit tous les champs qu'un √©v√©nement peut avoir.
 * Un √©v√©nement peut √™tre une formation, collecte, distribution, etc.
 */
export interface Event {
  id?: number;                    // ID unique de l'√©v√©nement (optionnel car g√©n√©r√© automatiquement)
  title: string;                  // Titre de l'√©v√©nement
  description: string;            // Description d√©taill√©e
  date: string;                   // Date de l'√©v√©nement (format: YYYY-MM-DD)
  time: string;                   // Heure de l'√©v√©nement (format: HH:MM)
  location: string;               // Lieu o√π se d√©roule l'√©v√©nement
  type: 'Formation' | 'Collecte' | 'Distribution' | 'Sensibilisation' | 'Autre'; // Type d'√©v√©nement
  status: 'Planifi√©' | 'En cours' | 'Termin√©' | 'Annul√©';  // Statut actuel
  organizer: string;              // Nom de l'organisateur
  participants: string[];         // Liste des participants
  maxParticipants?: number;       // Nombre maximum de participants (optionnel)
  requirements?: string[];        // Exigences/pr√©requis (optionnel)
  notes?: string;                 // Notes additionnelles (optionnel)
  createdAt: string;              // Date de cr√©ation (format ISO)
}

/**
 * üõ†Ô∏è Service des √âv√©nements
 * 
 * Ce service contient toutes les fonctions pour g√©rer les √©v√©nements.
 * Il communique avec le serveur JSON pour sauvegarder/r√©cup√©rer les donn√©es.
 */
export const eventService = {
  /**
   * üìã R√©cup√©rer tous les √©v√©nements
   * 
   * Cette fonction fait une requ√™te GET pour obtenir la liste compl√®te des √©v√©nements.
   * 
   * @returns Promise<Event[]> - Liste de tous les √©v√©nements
   */
  getAll: async (): Promise<Event[]> => {
    console.log('Fetching all events from JSON server...');
    const response = await api.get('/events');
    console.log('Events fetched:', response.data);
    return response.data;
  },

  /**
   * üîç R√©cup√©rer un √©v√©nement par son ID
   * 
   * Cette fonction trouve un √©v√©nement sp√©cifique gr√¢ce √† son ID unique.
   * 
   * @param id - L'ID de l'√©v√©nement √† r√©cup√©rer
   * @returns Promise<Event> - L'√©v√©nement trouv√©
   */
  getById: async (id: number): Promise<Event> => {
    console.log(`Fetching event ${id} from JSON server...`);
    const response = await api.get(`/events/${id}`);
    console.log('Event fetched:', response.data);
    return response.data;
  },

  /**
   * ‚ûï Cr√©er un nouvel √©v√©nement
   * 
   * Cette fonction ajoute un nouvel √©v√©nement dans la base de donn√©es.
   * L'ID sera g√©n√©r√© automatiquement par le serveur.
   * 
   * @param event - Les donn√©es de l'√©v√©nement (sans l'ID)
   * @returns Promise<Event> - L'√©v√©nement cr√©√© avec son nouvel ID
   */
  create: async (event: Omit<Event, 'id'>): Promise<Event> => {
    console.log('Creating event in JSON server:', event);
    const response = await api.post('/events', event);
    console.log('Event created:', response.data);
    return response.data;
  },

  /**
   * ‚úèÔ∏è Mettre √† jour un √©v√©nement existant
   * 
   * Cette fonction modifie les informations d'un √©v√©nement existant.
   * On peut modifier seulement certains champs gr√¢ce √† Partial<Event>.
   * 
   * @param id - L'ID de l'√©v√©nement √† modifier
   * @param event - Les nouvelles donn√©es (partielles)
   * @returns Promise<Event> - L'√©v√©nement mis √† jour
   */
  update: async (id: number, event: Partial<Event>): Promise<Event> => {
    console.log(`Updating event ${id} in JSON server:`, event);
    const response = await api.put(`/events/${id}`, event);
    console.log('Event updated:', response.data);
    return response.data;
  },

  /**
   * üóëÔ∏è Supprimer un √©v√©nement
   * 
   * Cette fonction supprime d√©finitivement un √©v√©nement de la base de donn√©es.
   * 
   * @param id - L'ID de l'√©v√©nement √† supprimer
   * @returns Promise<void> - Aucune donn√©e retourn√©e
   */
  delete: async (id: number): Promise<void> => {
    console.log(`Deleting event ${id} from JSON server...`);
    await api.delete(`/events/${id}`);
    console.log('Event deleted');
  },

  /**
   * üîé Rechercher des √©v√©nements
   * 
   * Cette fonction recherche des √©v√©nements selon un terme de recherche.
   * La recherche se fait dans tous les champs texte de l'√©v√©nement.
   * 
   * @param query - Le terme √† rechercher
   * @returns Promise<Event[]> - Liste des √©v√©nements correspondants
   */
  search: async (query: string): Promise<Event[]> => {
    console.log(`Searching events with query: ${query}`);
    const response = await api.get(`/events?q=${encodeURIComponent(query)}`);
    console.log('Search results:', response.data);
    return response.data;
  },

  /**
   * üè∑Ô∏è Filtrer les √©v√©nements par type
   * 
   * Cette fonction r√©cup√®re seulement les √©v√©nements d'un type sp√©cifique
   * (Formation, Collecte, Distribution, etc.).
   * 
   * @param type - Le type d'√©v√©nement √† filtrer
   * @returns Promise<Event[]> - Liste des √©v√©nements de ce type
   */
  getByType: async (type: string): Promise<Event[]> => {
    console.log(`Filtering events by type: ${type}`);
    const response = await api.get(`/events?type=${type}`);
    console.log('Filtered events:', response.data);
    return response.data;
  },

  /**
   * üìä Filtrer les √©v√©nements par statut
   * 
   * Cette fonction r√©cup√®re seulement les √©v√©nements avec un statut sp√©cifique
   * (Planifi√©, En cours, Termin√©, Annul√©).
   * 
   * @param status - Le statut √† filtrer
   * @returns Promise<Event[]> - Liste des √©v√©nements avec ce statut
   */
  getByStatus: async (status: string): Promise<Event[]> => {
    console.log(`Filtering events by status: ${status}`);
    const response = await api.get(`/events?status=${status}`);
    console.log('Filtered events:', response.data);
    return response.data;
  },

  /**
   * ‚è∞ Obtenir les √©v√©nements √† venir
   * 
   * Cette fonction r√©cup√®re les √©v√©nements futurs qui ne sont pas termin√©s.
   * Elle compare la date de l'√©v√©nement avec la date actuelle.
   * 
   * @returns Promise<Event[]> - Liste des √©v√©nements √† venir
   */
  getUpcoming: async (): Promise<Event[]> => {
    console.log('Fetching upcoming events...');
    const response = await api.get('/events');
    const events = response.data;
    const now = new Date(); // Date/heure actuelle
    
    // Filtrer pour garder seulement les √©v√©nements futurs et actifs
    const upcomingEvents = events.filter((event: Event) => {
      const eventDate = new Date(event.date);
      return eventDate >= now && event.status !== 'Termin√©' && event.status !== 'Annul√©';
    });
    
    console.log('Upcoming events:', upcomingEvents);
    return upcomingEvents;
  },
};
