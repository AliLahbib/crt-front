
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { eventService, Event } from '@/services/eventService';
import { useToast } from '@/hooks/use-toast';

/**
 * üéØ Hook useEvents - Gestion des √©v√©nements avec React Query
 * 
 * Ce hook personnalis√© fournit toutes les fonctionnalit√©s n√©cessaires pour g√©rer les √©v√©nements.
 * Il utilise React Query pour :
 * - Mettre en cache les donn√©es
 * - G√©rer les √©tats de chargement
 * - Synchroniser automatiquement les donn√©es
 * - Optimiser les performances
 */
export const useEvents = () => {
  const { toast } = useToast();           // Pour afficher les notifications
  const queryClient = useQueryClient();   // Pour g√©rer le cache React Query

  /**
   * üìã Query pour r√©cup√©rer tous les √©v√©nements
   * 
   * useQuery est utilis√© pour les op√©rations de lecture (GET).
   * Il met automatiquement en cache les donn√©es et les actualise quand n√©cessaire.
   */
  const {
    data: events = [],        // Les donn√©es r√©cup√©r√©es (liste vide par d√©faut)
    isLoading,               // √âtat de chargement (true pendant la requ√™te)
    error,                   // Erreur s'il y en a une
  } = useQuery({
    queryKey: ['events'],           // Cl√© unique pour identifier cette query dans le cache
    queryFn: eventService.getAll,   // Fonction qui fait la requ√™te au serveur
  });

  /**
   * ‚ûï Mutation pour cr√©er un nouvel √©v√©nement
   * 
   * useMutation est utilis√© pour les op√©rations d'√©criture (POST, PUT, DELETE).
   * Il ne se d√©clenche que quand on appelle mutate().
   */
  const createMutation = useMutation({
    mutationFn: eventService.create,    // Fonction qui cr√©e l'√©v√©nement
    onSuccess: () => {
      // Quand la cr√©ation r√©ussit :
      // 1. Actualiser la liste des √©v√©nements dans le cache
      queryClient.invalidateQueries({ queryKey: ['events'] });
      // 2. Afficher une notification de succ√®s
      toast({
        title: "Succ√®s",
        description: "√âv√©nement cr√©√© avec succ√®s",
      });
    },
    onError: () => {
      // Quand la cr√©ation √©choue :
      // Afficher une notification d'erreur
      toast({
        title: "Erreur",
        description: "Erreur lors de la cr√©ation de l'√©v√©nement",
        variant: "destructive",
      });
    },
  });

  /**
   * ‚úèÔ∏è Mutation pour mettre √† jour un √©v√©nement
   * 
   * Cette mutation accepte un objet avec l'ID et les nouvelles donn√©es.
   */
  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: Partial<Event> }) =>
      eventService.update(id, data),
    onSuccess: () => {
      // Actualiser le cache et afficher le succ√®s
      queryClient.invalidateQueries({ queryKey: ['events'] });
      toast({
        title: "Succ√®s",
        description: "√âv√©nement mis √† jour avec succ√®s",
      });
    },
    onError: () => {
      // Afficher l'erreur
      toast({
        title: "Erreur",
        description: "Erreur lors de la mise √† jour de l'√©v√©nement",
        variant: "destructive",
      });
    },
  });

  /**
   * üóëÔ∏è Mutation pour supprimer un √©v√©nement
   * 
   * Cette mutation accepte seulement l'ID de l'√©v√©nement √† supprimer.
   */
  const deleteMutation = useMutation({
    mutationFn: eventService.delete,
    onSuccess: () => {
      // Actualiser le cache et afficher le succ√®s
      queryClient.invalidateQueries({ queryKey: ['events'] });
      toast({
        title: "Succ√®s",
        description: "√âv√©nement supprim√© avec succ√®s",
      });
    },
    onError: () => {
      // Afficher l'erreur
      toast({
        title: "Erreur",
        description: "Erreur lors de la suppression de l'√©v√©nement",
        variant: "destructive",
      });
    },
  });

  /**
   * üì§ Retourner toutes les donn√©es et fonctions n√©cessaires
   * 
   * Le hook retourne un objet avec :
   * - Les donn√©es (events)
   * - Les √©tats (isLoading, error)
   * - Les fonctions d'action (createEvent, updateEvent, deleteEvent)
   * - Les √©tats des mutations (isCreating, isUpdating, isDeleting)
   */
  return {
    // üìä Donn√©es
    events,           // Liste des √©v√©nements
    isLoading,        // Est-ce qu'on charge les donn√©es ?
    error,            // Y a-t-il une erreur ?
    
    // üîß Actions CRUD (Create, Read, Update, Delete)
    createEvent: createMutation.mutate,    // Fonction pour cr√©er un √©v√©nement
    updateEvent: updateMutation.mutate,    // Fonction pour modifier un √©v√©nement
    deleteEvent: deleteMutation.mutate,    // Fonction pour supprimer un √©v√©nement
    
    // ‚è≥ √âtats des actions
    isCreating: createMutation.isPending,  // Est-ce qu'on cr√©e un √©v√©nement ?
    isUpdating: updateMutation.isPending,  // Est-ce qu'on modifie un √©v√©nement ?
    isDeleting: deleteMutation.isPending,  // Est-ce qu'on supprime un √©v√©nement ?
  };
};
