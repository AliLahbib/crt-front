
import { api } from './api';

/**
 * üë• Interface Volunteer - Structure d'un b√©n√©vole
 * 
 * Cette interface d√©finit tous les champs qu'un b√©n√©vole peut avoir.
 * TypeScript utilise cette interface pour v√©rifier que nos donn√©es sont correctes.
 */
export interface Volunteer {
  id?: number;                    // ID unique du b√©n√©vole (optionnel car g√©n√©r√© automatiquement)
  firstName: string;              // Pr√©nom
  lastName: string;               // Nom de famille
  email: string;                  // Adresse email
  phone: string;                  // Num√©ro de t√©l√©phone
  address: string;                // Adresse compl√®te
  role: string;                   // R√¥le/poste dans l'organisation
  skills: string[];               // Liste des comp√©tences
  status: 'Actif' | 'Inactif' | 'Suspendu';  // Statut du b√©n√©vole
  availability: string;           // Disponibilit√© (Disponible, En mission, etc.)
  joinDate: string;               // Date d'adh√©sion
  notes?: string;                 // Notes additionnelles (optionnel)
}

/**
 * üìä Interface pour les statistiques des b√©n√©voles
 * 
 * Cette interface d√©finit la structure des statistiques qu'on calcule.
 */
export interface VolunteerStats {
  total: number;          // Nombre total de b√©n√©voles
  actifs: number;         // Nombre de b√©n√©voles actifs
  disponibles: number;    // Nombre de b√©n√©voles disponibles
  enMission: number;      // Nombre de b√©n√©voles en mission
  indisponibles: number;  // Nombre de b√©n√©voles indisponibles
}

/**
 * üõ†Ô∏è Service des B√©n√©voles
 * 
 * Ce service contient toutes les fonctions pour g√©rer les b√©n√©voles.
 * Il communique avec l'API Symfony pour sauvegarder/r√©cup√©rer les donn√©es.
 */
export const volunteerService = {
  /**
   * üìã R√©cup√©rer tous les b√©n√©voles
   * 
   * Cette fonction fait une requ√™te GET pour obtenir la liste compl√®te des b√©n√©voles.
   * 
   * @returns Promise<Volunteer[]> - Liste de tous les b√©n√©voles
   */
  getAll: async (): Promise<Volunteer[]> => {
    console.log('Fetching all volunteers from Symfony API...');
    const response = await api.get('/volunteers');
    console.log('Volunteers fetched:', response.data);
    return response.data;
  },

  /**
   * üîç R√©cup√©rer un b√©n√©vole par son ID
   * 
   * Cette fonction trouve un b√©n√©vole sp√©cifique gr√¢ce √† son ID unique.
   * 
   * @param id - L'ID du b√©n√©vole √† r√©cup√©rer
   * @returns Promise<Volunteer> - Le b√©n√©vole trouv√©
   */
  getById: async (id: number): Promise<Volunteer> => {
    console.log(`Fetching volunteer ${id} from Symfony API...`);
    const response = await api.get(`/volunteers/${id}`);
    console.log('Volunteer fetched:', response.data);
    return response.data;
  },

  /**
   * ‚ûï Cr√©er un nouveau b√©n√©vole
   * 
   * Cette fonction ajoute un nouveau b√©n√©vole dans la base de donn√©es.
   * L'ID sera g√©n√©r√© automatiquement par le serveur.
   * 
   * @param volunteer - Les donn√©es du b√©n√©vole (sans l'ID)
   * @returns Promise<Volunteer> - Le b√©n√©vole cr√©√© avec son nouvel ID
   */
  create: async (volunteer: Omit<Volunteer, 'id'>): Promise<Volunteer> => {
    console.log('Creating volunteer in Symfony API:', volunteer);
    const response = await api.post('/volunteers', volunteer);
    console.log('Volunteer created:', response.data);
    return response.data;
  },

  /**
   * ‚úèÔ∏è Mettre √† jour un b√©n√©vole existant
   * 
   * Cette fonction modifie les informations d'un b√©n√©vole existant.
   * On peut modifier seulement certains champs gr√¢ce √† Partial<Volunteer>.
   * 
   * @param id - L'ID du b√©n√©vole √† modifier
   * @param volunteer - Les nouvelles donn√©es (partielles)
   * @returns Promise<Volunteer> - Le b√©n√©vole mis √† jour
   */
  update: async (id: number, volunteer: Partial<Volunteer>): Promise<Volunteer> => {
    console.log(`Updating volunteer ${id} in Symfony API:`, volunteer);
    const response = await api.put(`/volunteers/${id}`, volunteer);
    console.log('Volunteer updated:', response.data);
    return response.data;
  },

  /**
   * üóëÔ∏è Supprimer un b√©n√©vole
   * 
   * Cette fonction supprime d√©finitivement un b√©n√©vole de la base de donn√©es.
   * 
   * @param id - L'ID du b√©n√©vole √† supprimer
   * @returns Promise<void> - Aucune donn√©e retourn√©e
   */
  delete: async (id: number): Promise<void> => {
    console.log(`Deleting volunteer ${id} from Symfony API...`);
    await api.delete(`/volunteers/${id}`);
    console.log('Volunteer deleted');
  },

  /**
   * üîé Rechercher des b√©n√©voles
   * 
   * Cette fonction recherche des b√©n√©voles selon un terme de recherche.
   * La recherche se fait dans le nom, pr√©nom, email, etc.
   * 
   * @param query - Le terme √† rechercher
   * @returns Promise<Volunteer[]> - Liste des b√©n√©voles correspondants
   */
  search: async (query: string): Promise<Volunteer[]> => {
    console.log(`Searching volunteers with query: ${query}`);
    const response = await api.get(`/volunteers/search?q=${encodeURIComponent(query)}`);
    console.log('Search results:', response.data);
    return response.data;
  },

  /**
   * üìä Filtrer les b√©n√©voles par statut
   * 
   * Cette fonction r√©cup√®re seulement les b√©n√©voles avec un statut sp√©cifique
   * (Actif, Inactif, Suspendu).
   * 
   * @param status - Le statut √† filtrer
   * @returns Promise<Volunteer[]> - Liste des b√©n√©voles avec ce statut
   */
  getByStatus: async (status: string): Promise<Volunteer[]> => {
    console.log(`Filtering volunteers by status: ${status}`);
    const response = await api.get(`/volunteers/status/${status}`);
    console.log('Filtered volunteers:', response.data);
    return response.data;
  },

  /**
   * üìà R√©cup√©rer les statistiques des b√©n√©voles
   * 
   * Cette fonction r√©cup√®re les statistiques calcul√©es c√¥t√© serveur.
   * 
   * @returns Promise<VolunteerStats> - Les statistiques calcul√©es
   */
  getStats: async (): Promise<VolunteerStats> => {
    console.log('Fetching volunteer stats from Symfony API...');
    const response = await api.get('/volunteers/stats');
    console.log('Volunteer stats fetched:', response.data);
    return response.data;
  },

  /**
   * üîÑ Changer le statut d'un b√©n√©vole
   * 
   * @param id - L'ID du b√©n√©vole
   * @param status - Le nouveau statut
   * @returns Promise<Volunteer> - Le b√©n√©vole mis √† jour
   */
  changeStatus: async (id: number, status: string): Promise<Volunteer> => {
    console.log(`Changing status for volunteer ${id} to: ${status}`);
    const response = await api.put(`/volunteers/${id}/status`, { status });
    console.log('Status changed:', response.data);
    return response.data;
  },

  /**
   * üìÖ Changer la disponibilit√© d'un b√©n√©vole
   * 
   * @param id - L'ID du b√©n√©vole
   * @param availability - La nouvelle disponibilit√©
   * @returns Promise<Volunteer> - Le b√©n√©vole mis √† jour
   */
  changeAvailability: async (id: number, availability: string): Promise<Volunteer> => {
    console.log(`Changing availability for volunteer ${id} to: ${availability}`);
    const response = await api.put(`/volunteers/${id}/availability`, { availability });
    console.log('Availability changed:', response.data);
    return response.data;
  },

  /**
   * üéØ R√©cup√©rer les b√©n√©voles disponibles pour mission
   * 
   * @returns Promise<Volunteer[]> - Liste des b√©n√©voles disponibles
   */
  getAvailable: async (): Promise<Volunteer[]> => {
    console.log('Fetching available volunteers from Symfony API...');
    const response = await api.get('/volunteers/available');
    console.log('Available volunteers:', response.data);
    return response.data;
  }
};
